1. Basic Population

Populate a single referenced field with all data.

Post.find().populate('author').exec((err, posts) => {
  console.log(posts); // `author` field is populated with user data
});


Mongoose's populate function is powerful and versatile, allowing you to retrieve referenced documents in various ways. Here are different ways to use populate in Mongoose:
1. Basic Population

Populate a single referenced field with all data.

    Post.find().populate('author').exec((err, posts) => {
    console.log(posts); // `author` field is populated with user data
    });

2. Select Specific Fields in Populated Document

Populate only certain fields in the referenced document to avoid loading unnecessary data.

    Post.find()
    .populate('author', 'name email') // Only fetch `name` and `email` from User
    .exec((err, posts) => {
        console.log(posts);
    });

3. Deep Population (Nested Population)

Populate fields within referenced documents (e.g., if author has a profile reference).

    Post.find()
    .populate({
        path: 'author',
        populate: { path: 'profile', select: 'bio picture' }
    })
    .exec((err, posts) => {
        console.log(posts); // `author.profile` is also populated
    });

5. Conditional Population (Filtering Documents)

 Populate based on conditions, such as only populating authors with a specific condition.

    Post.find()
    .populate({
        path: 'author',
        match: { isActive: true }, // Only populate active users
        select: 'name email'
    })
    .exec((err, posts) => {
        console.log(posts);
    });

7. Population with Sorting and Skipping

  Control the order of populated documents and skip specific records (useful for pagination).

    Post.find()
    .populate({
        path: 'comments',
        options: { sort: { date: -1 }, skip: 2, limit: 5 } // Sort comments by date, skip 2, limit 5
    })
    .exec((err, posts) => {
        console.log(posts);
    });

9. Populating Virtual Fields

  If you have a virtual field referencing another collection, you can also populate it.

    // In schema
    userSchema.virtual('posts', {
    ref: 'Post',
    localField: '_id',
    foreignField: 'author'
    });

    // Usage
    User.find().populate('posts').exec((err, users) => {
    console.log(users); // `posts` virtual field is populated with user's posts
    });


